#+TITLE: Web Calling Library

* Goals

1. Hide the complexities of SIP, SDP and WebRTC from the
   implementation of the Webphone through an easy to use modern Javascript API.

2. Uses =Promises= and =async= where possible, use events only where
   neccessary (not in request/response flows).

3. Export as ESM module.

4. Error handling is clear and where possible Promise based.

5. SIPlib does not keep state.

6. Wraps SIP.js in such a way that upgrades are easy.

7. Abstract over differences between browsers.

* Use cases

- Register phone
- Unregister phone
- Accepting an incoming call
- Denying an incoming call
- Creating an outgoing call
- Hanging up a call (in or out)
- Putting a call on hold
- Putting a call out of hold
- Blind transfering a call
- Attended transfer of call
- Getting presence updates for contacts (blf)
- Enter DTMF keys in a call
- Muting a call?
- Switching audio devices during a call?

* Accidental complexity

- Websocket connection to the SIP proxy.
  - Connecting/disconnecting
  - Handling failures

- Setting up the WebRTC channels (SIP.js) does this.
- Requesting the audio/video devices to be used (SIP.js)
  - Is done by the SessionDescriptionHandler, maybe the audio stream
    handling could be decoupled from the SDH. Right now the SDH always
    does a =getUserMedia= call to get /a/ microphone.
- Negotiating the SDP (SIP.js).

- Logging..
  - Logging all SIP traffic?

* SIPlib client setup

- Which audio/video devices to use?
  - /how to switch/ a/v during a call? Is this possible?
- ice servers (stun)
- transport options (reconnection etc.?)
- user agent
- noanswertimeout?
- etc.

Maybe best to first just pass through the =options= to the =SIP.UA=
constructor?

* Example flows

** Connecting and registering

#+begin_src js
  const client = new SipLibClient({
    proxy: 'websocket.voipgrid.nl',
    username: 'jos@vialerapp.com',
    password: 'xxxx',
    userMediaFlags
  });

  await client.register();
#+end_src

** Incoming call

#+begin_src js
  // incoming call below
  sessions = {};
  client.on('invite', (session) => {
    // If DND, session.reject()
    sessions[session.id] = session;
    // reinvite..
    try {
      ringer();
      spawnNotification(session).then(action => session.accept());

      let accepted = await session.accepted();
      if (!accepted) {
        return;
      }

      showCallScreen();

      await session.active();
    } catch (e) {
      showErrorMessage(e)
    } finally {
      closeCallScreen();

      delete sessions[session.id];
    }
  });

#+end_src

** Outgoing call

#+begin_src js
  const session = client.call({number: '123', name: 'Alice'});
  sessions[session.id] = session;

  try {
    showOutgoingCallInProgress()

    let isAccepted = await session.accepted()
    if (!isAccepted) {
      showRejectedScreen();
      return;
    }

    showCallScreen();
    await session.terminated();
  } catch (e) {

  } finally {
    closeCallScreen();

    delete sessions[session.id];
  }


  if (await session.active()) { // wait until the call is picked up)
    await session.dtmf('#123');
    await session.hold();
    const other = client.call({number: '456', name: 'Bob'});
    if (await other.active()) {
    }
    await session.transfer(other);
  }
#+end_src


* Audio device selection

1. Set a primary input & output device:

#+begin_src js
  import * as WebCalling from 'vialer/web-calling';

  const client = new WebCalling.Client({
    media: {
      input: {
        id: undefined, // default input device
        audioProcessing: true,
        volume: 1.0,
        muted: false
      },
      output: {
        id: undefined, // default output device
        volume: 1.0,
        muted: false
      }
    }
  })
#+end_src

2. Change the primary I/O devices:

#+begin_src js
  client.defaultMedia.output.id = '230988012091820398213';
#+end_src

3. Change the media of a session:

#+begin_src js
  const session = await client.invite('123');
  session.media.input.volume = 50;
  session.media.input.audioProcessing = false;
  session.media.input.muted = true;
  session.media.output.muted = false;
  session.media.setInput({
    id: '120398120398123',
    audioProcessing: true,
    volume: 0.5,
    muted: true
  });
#+end_src
